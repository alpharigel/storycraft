{"ast":null,"code":"var _jsxFileName = \"/Users/arminforoughi/Documents/storycraft/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport StoryForm from './components/StoryForm';\nimport Storybook from './components/Storybook';\nimport { parseStoryResponse } from './utils/storyParser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [story, setStory] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [streamingData, setStreamingData] = useState([]);\n  const [isStreaming, setIsStreaming] = useState(false);\n  const [storyHistory, setStoryHistory] = useState('');\n  const [storyOptions, setStoryOptions] = useState([]);\n  const generateStory = async (formData, selectedOption = null) => {\n    setLoading(true);\n    setError(null);\n    setStreamingData([]);\n    setIsStreaming(true);\n\n    // If continuing the story with an option, update the history\n    let history = storyHistory;\n    if (selectedOption) {\n      history = history + ' ' + selectedOption;\n    } else {\n      // Reset history if starting a new story\n      history = ' ';\n    }\n    try {\n      const response = await fetch('/api/released-app/5f0bbd5b-d933-4fac-912f-aaa4e6772386/run', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ww-EFkpTZJlBulVgy6lkkX4KY01Q6UtN6g9x0dC3MdGkwVHIpn0jjVbOt'\n        },\n        body: JSON.stringify({\n          inputs: {\n            childname: formData.childName,\n            interests: formData.interests,\n            readinglevel: formData.readingLevel,\n            history: history\n          },\n          version: \"^1.0\"\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to generate story');\n      }\n\n      // For streaming, just display the raw text first\n      const text = await response.text();\n      console.log(text);\n\n      // Try to extract and display any images from the response\n      const imageUrlRegex = /\"image_url\":\"([^\"]+)\"/g;\n      let match;\n      const imageUrls = [];\n      while ((match = imageUrlRegex.exec(text)) !== null) {\n        imageUrls.push(match[1]);\n      }\n\n      // Extract text content\n      const introTextRegex = /\"introduction_text\":\"([^\"]+)\"/;\n      const adventureText1Regex = /\"adventure_text_1\":\"([^\"]+)\"/;\n      const adventureText2Regex = /\"adventure_text_2\":\"([^\"]+)\"/;\n      const adventureText3Regex = /\"adventure_text_3\":\"([^\"]+)\"/;\n      const questionTextRegex = /\"question_text\":\"([^\"]+)\"/;\n      const introMatch = text.match(introTextRegex);\n      const adventure1Match = text.match(adventureText1Regex);\n      const adventure2Match = text.match(adventureText2Regex);\n      const adventure3Match = text.match(adventure3Regex);\n      const questionMatch = text.match(questionTextRegex);\n      const textContents = [];\n      if (introMatch && introMatch[1]) {\n        textContents.push({\n          type: 'introduction',\n          text: introMatch[1]\n        });\n      }\n      if (adventure1Match && adventure1Match[1]) {\n        textContents.push({\n          type: 'adventure_1',\n          text: adventure1Match[1]\n        });\n      }\n      if (adventure2Match && adventure2Match[1]) {\n        textContents.push({\n          type: 'adventure_2',\n          text: adventure2Match[1]\n        });\n      }\n      if (adventure3Match && adventure3Match[1]) {\n        textContents.push({\n          type: 'adventure_3',\n          text: adventure3Match[1]\n        });\n      }\n\n      // Extract options from the question text\n      let options = [];\n      if (questionMatch && questionMatch[1]) {\n        const questionText = questionMatch[1];\n\n        // Extract numbered options (1. Option text, 2. Option text, etc.)\n        const optionsRegex = /\\d+\\.\\s+([^.]+)(?:\\.|\\?|$)/g;\n        let optionMatch;\n        while ((optionMatch = optionsRegex.exec(questionText)) !== null) {\n          options.push(optionMatch[1].trim());\n        }\n\n        // Add the question text as the last page\n        textContents.push({\n          type: 'question',\n          text: questionText\n        });\n      }\n\n      // Update story history with the current story text\n      const allText = textContents.map(content => content.text).join(' ');\n      setStoryHistory(history ? history + ' ' + allText : allText);\n      setStoryOptions(options);\n\n      // Create a simple story object from the extracted data\n      if (imageUrls.length > 0 && textContents.length > 0) {\n        // Create pages from the text contents\n        const pages = textContents.map((content, index) => ({\n          text: content.text,\n          image: index < imageUrls.length ? imageUrls[index] : null,\n          type: content.type\n        }));\n        setStory({\n          output: {\n            pages,\n            options\n          }\n        });\n      } else {\n        // Try to parse as JSON as a fallback\n        try {\n          const data = JSON.parse(text);\n          const parsedStory = parseStoryResponse(data);\n          setStory(parsedStory);\n        } catch (e) {\n          console.error('Failed to parse response:', e);\n          setError('Failed to parse the story response');\n        }\n      }\n\n      // Display the raw response for debugging\n      setStreamingData([{\n        type: 'raw',\n        value: text\n      }]);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n      setIsStreaming(false);\n    }\n  };\n  const continueStory = option => {\n    // Use the last form data to continue the story\n    const formData = {\n      childName: story.childName || '',\n      interests: story.interests || 'Futbol',\n      readingLevel: story.readingLevel || 'Level 1'\n    };\n    generateStory(formData, option);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header-minimal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa-solid fa-book-open\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"logo-text\",\n          children: \"StoryCraft\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!story && !isStreaming && /*#__PURE__*/_jsxDEV(StoryForm, {\n        onSubmit: generateStory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 36\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Generating your storybook... Please wait!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 19\n      }, this), isStreaming && streamingData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"streaming-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Generating your story...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"streaming-content\",\n          children: streamingData.map((chunk, index) => {\n            // Display text chunks\n            if (chunk.type === 'chunk' && chunk.value.type === 'chunk') {\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                children: chunk.value.value\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 26\n              }, this);\n            }\n\n            // Display images as they come in\n            if (chunk.type === 'chunk' && chunk.value.type === 'tool' && chunk.value.output && chunk.value.output.type === 'image') {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"streaming-image\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: chunk.value.output.image_url,\n                  alt: \"Story illustration\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 23\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 21\n              }, this);\n            }\n            return null;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this), story && !loading && /*#__PURE__*/_jsxDEV(Storybook, {\n        story: story,\n        options: storyOptions,\n        onSelectOption: continueStory,\n        onNewStory: () => {\n          setStory(null);\n          setStreamingData([]);\n          setStoryHistory('');\n          setStoryOptions([]);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Powered by Wordware AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hWtgzIQeJf438hP+kxU72hN+P+0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","StoryForm","Storybook","parseStoryResponse","jsxDEV","_jsxDEV","App","_s","story","setStory","loading","setLoading","error","setError","streamingData","setStreamingData","isStreaming","setIsStreaming","storyHistory","setStoryHistory","storyOptions","setStoryOptions","generateStory","formData","selectedOption","history","response","fetch","method","headers","body","JSON","stringify","inputs","childname","childName","interests","readinglevel","readingLevel","version","ok","Error","text","console","log","imageUrlRegex","match","imageUrls","exec","push","introTextRegex","adventureText1Regex","adventureText2Regex","adventureText3Regex","questionTextRegex","introMatch","adventure1Match","adventure2Match","adventure3Match","adventure3Regex","questionMatch","textContents","type","options","questionText","optionsRegex","optionMatch","trim","allText","map","content","join","length","pages","index","image","output","data","parse","parsedStory","e","value","err","message","continueStory","option","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","chunk","src","image_url","alt","onSelectOption","onNewStory","_c","$RefreshReg$"],"sources":["/Users/arminforoughi/Documents/storycraft/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport StoryForm from './components/StoryForm';\nimport Storybook from './components/Storybook';\nimport { parseStoryResponse } from './utils/storyParser';\n\nfunction App() {\n  const [story, setStory] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [streamingData, setStreamingData] = useState([]);\n  const [isStreaming, setIsStreaming] = useState(false);\n  const [storyHistory, setStoryHistory] = useState('');\n  const [storyOptions, setStoryOptions] = useState([]);\n\n  const generateStory = async (formData, selectedOption = null) => {\n    setLoading(true);\n    setError(null);\n    setStreamingData([]);\n    setIsStreaming(true);\n    \n    // If continuing the story with an option, update the history\n    let history = storyHistory;\n    if (selectedOption) {\n      history = history + ' ' + selectedOption;\n    } else {\n      // Reset history if starting a new story\n      history = ' ';\n    }\n    \n    try {\n      const response = await fetch('/api/released-app/5f0bbd5b-d933-4fac-912f-aaa4e6772386/run', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ww-EFkpTZJlBulVgy6lkkX4KY01Q6UtN6g9x0dC3MdGkwVHIpn0jjVbOt'\n        },\n        body: JSON.stringify({\n          inputs: {\n            childname: formData.childName,\n            interests: formData.interests,\n            readinglevel: formData.readingLevel,\n            history: history\n          },\n          version: \"^1.0\"\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to generate story');\n      }\n\n      \n      // For streaming, just display the raw text first\n      const text = await response.text();\n      console.log(text);\n      \n      // Try to extract and display any images from the response\n      const imageUrlRegex = /\"image_url\":\"([^\"]+)\"/g;\n      let match;\n      const imageUrls = [];\n      \n      while ((match = imageUrlRegex.exec(text)) !== null) {\n        imageUrls.push(match[1]);\n      }\n      \n      // Extract text content\n      const introTextRegex = /\"introduction_text\":\"([^\"]+)\"/;\n      const adventureText1Regex = /\"adventure_text_1\":\"([^\"]+)\"/;\n      const adventureText2Regex = /\"adventure_text_2\":\"([^\"]+)\"/;\n      const adventureText3Regex = /\"adventure_text_3\":\"([^\"]+)\"/;\n      const questionTextRegex = /\"question_text\":\"([^\"]+)\"/;\n\n      const introMatch = text.match(introTextRegex);\n      const adventure1Match = text.match(adventureText1Regex);\n      const adventure2Match = text.match(adventureText2Regex);\n      const adventure3Match = text.match(adventure3Regex);\n      const questionMatch = text.match(questionTextRegex);\n\n      const textContents = [];\n\n      if (introMatch && introMatch[1]) {\n        textContents.push({\n          type: 'introduction',\n          text: introMatch[1]\n        });\n      }\n\n      if (adventure1Match && adventure1Match[1]) {\n        textContents.push({\n          type: 'adventure_1',\n          text: adventure1Match[1]\n        });\n      }\n\n      if (adventure2Match && adventure2Match[1]) {\n        textContents.push({\n          type: 'adventure_2',\n          text: adventure2Match[1]\n        });\n      }\n\n      if (adventure3Match && adventure3Match[1]) {\n        textContents.push({\n          type: 'adventure_3',\n          text: adventure3Match[1]\n        });\n      }\n\n      // Extract options from the question text\n      let options = [];\n      if (questionMatch && questionMatch[1]) {\n        const questionText = questionMatch[1];\n        \n        // Extract numbered options (1. Option text, 2. Option text, etc.)\n        const optionsRegex = /\\d+\\.\\s+([^.]+)(?:\\.|\\?|$)/g;\n        let optionMatch;\n        while ((optionMatch = optionsRegex.exec(questionText)) !== null) {\n          options.push(optionMatch[1].trim());\n        }\n        \n        // Add the question text as the last page\n        textContents.push({\n          type: 'question',\n          text: questionText\n        });\n      }\n\n      // Update story history with the current story text\n      const allText = textContents.map(content => content.text).join(' ');\n      setStoryHistory(history ? history + ' ' + allText : allText);\n      setStoryOptions(options);\n      \n      // Create a simple story object from the extracted data\n      if (imageUrls.length > 0 && textContents.length > 0) {\n        // Create pages from the text contents\n        const pages = textContents.map((content, index) => ({\n          text: content.text,\n          image: index < imageUrls.length ? imageUrls[index] : null,\n          type: content.type\n        }));\n        \n        setStory({\n          output: { \n            pages,\n            options\n          }\n        });\n      } else {\n        // Try to parse as JSON as a fallback\n        try {\n          const data = JSON.parse(text);\n          const parsedStory = parseStoryResponse(data);\n          setStory(parsedStory);\n        } catch (e) {\n          console.error('Failed to parse response:', e);\n          setError('Failed to parse the story response');\n        }\n      }\n      \n      // Display the raw response for debugging\n      setStreamingData([{ type: 'raw', value: text }]);\n      \n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n      setIsStreaming(false);\n    }\n  };\n\n  const continueStory = (option) => {\n    // Use the last form data to continue the story\n    const formData = {\n      childName: story.childName || '',\n      interests: story.interests || 'Futbol',\n      readingLevel: story.readingLevel || 'Level 1'\n    };\n    \n    generateStory(formData, option);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header-minimal\">\n        <div className=\"logo-container\">\n          <i className=\"fa-solid fa-book-open\"></i>\n          <span className=\"logo-text\">StoryCraft</span>\n        </div>\n      </header>\n      <main>\n        {!story && !isStreaming && <StoryForm onSubmit={generateStory} />}\n        {loading && <div className=\"loading\">Generating your storybook... Please wait!</div>}\n        {error && <div className=\"error\">Error: {error}</div>}\n        \n        {isStreaming && streamingData.length > 0 && (\n          <div className=\"streaming-container\">\n            <h2>Generating your story...</h2>\n            <div className=\"streaming-content\">\n              {streamingData.map((chunk, index) => {\n                // Display text chunks\n                if (chunk.type === 'chunk' && chunk.value.type === 'chunk') {\n                  return <span key={index}>{chunk.value.value}</span>;\n                }\n                \n                // Display images as they come in\n                if (chunk.type === 'chunk' && chunk.value.type === 'tool' && \n                    chunk.value.output && chunk.value.output.type === 'image') {\n                  return (\n                    <div key={index} className=\"streaming-image\">\n                      <img src={chunk.value.output.image_url} alt=\"Story illustration\" />\n                    </div>\n                  );\n                }\n                \n                return null;\n              })}\n            </div>\n          </div>\n        )}\n        \n        {story && !loading && (\n          <Storybook \n            story={story} \n            options={storyOptions}\n            onSelectOption={continueStory}\n            onNewStory={() => {\n              setStory(null);\n              setStreamingData([]);\n              setStoryHistory('');\n              setStoryOptions([]);\n            }} \n          />\n        )}\n      </main>\n      <footer>\n        <p>Powered by Wordware AI</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}