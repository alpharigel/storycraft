{"ast":null,"code":"/**\n * Parses the API response into a format usable by the Storybook component\n * This function handles the streaming response format from the Wordware API\n */\nexport const parseStoryResponse = apiResponse => {\n  try {\n    var _output$Intro_image, _output$Intro_image$o, _output$adventure_ima, _output$adventure_ima2, _output$Resolution_im, _output$Resolution_im2;\n    // Extract the story content and images from the API response\n    const output = apiResponse.values || {};\n\n    // Get the story generation data\n    const storyGeneration = output.story_generation || {};\n\n    // Extract text sections\n    const introText = storyGeneration.introduction_text || '';\n    const adventureText = storyGeneration.adventure_text || '';\n    const resolutionText = storyGeneration.resolution_text || '';\n\n    // Extract image URLs\n    const introImage = ((_output$Intro_image = output.Intro_image) === null || _output$Intro_image === void 0 ? void 0 : (_output$Intro_image$o = _output$Intro_image.output) === null || _output$Intro_image$o === void 0 ? void 0 : _output$Intro_image$o.image_url) || '';\n    const adventureImage = ((_output$adventure_ima = output.adventure_image) === null || _output$adventure_ima === void 0 ? void 0 : (_output$adventure_ima2 = _output$adventure_ima.output) === null || _output$adventure_ima2 === void 0 ? void 0 : _output$adventure_ima2.image_url) || '';\n    const resolutionImage = ((_output$Resolution_im = output.Resolution_image) === null || _output$Resolution_im === void 0 ? void 0 : (_output$Resolution_im2 = _output$Resolution_im.output) === null || _output$Resolution_im2 === void 0 ? void 0 : _output$Resolution_im2.image_url) || '';\n\n    // Create pages from the text and images\n    const pages = [{\n      text: introText,\n      image: introImage\n    }, {\n      text: adventureText,\n      image: adventureImage\n    }, {\n      text: resolutionText,\n      image: resolutionImage\n    }].filter(page => page.text || page.image); // Filter out empty pages\n\n    return {\n      output: {\n        pages\n      }\n    };\n  } catch (error) {\n    console.error('Error parsing story response:', error);\n    return {\n      output: {\n        pages: []\n      }\n    };\n  }\n};","map":{"version":3,"names":["parseStoryResponse","apiResponse","_output$Intro_image","_output$Intro_image$o","_output$adventure_ima","_output$adventure_ima2","_output$Resolution_im","_output$Resolution_im2","output","values","storyGeneration","story_generation","introText","introduction_text","adventureText","adventure_text","resolutionText","resolution_text","introImage","Intro_image","image_url","adventureImage","adventure_image","resolutionImage","Resolution_image","pages","text","image","filter","page","error","console"],"sources":["/Users/arminforoughi/Documents/storycraft/src/utils/storyParser.js"],"sourcesContent":["/**\n * Parses the API response into a format usable by the Storybook component\n * This function handles the streaming response format from the Wordware API\n */\nexport const parseStoryResponse = (apiResponse) => {\n  try {\n    // Extract the story content and images from the API response\n    const output = apiResponse.values || {};\n    \n    // Get the story generation data\n    const storyGeneration = output.story_generation || {};\n    \n    // Extract text sections\n    const introText = storyGeneration.introduction_text || '';\n    const adventureText = storyGeneration.adventure_text || '';\n    const resolutionText = storyGeneration.resolution_text || '';\n    \n    // Extract image URLs\n    const introImage = output.Intro_image?.output?.image_url || '';\n    const adventureImage = output.adventure_image?.output?.image_url || '';\n    const resolutionImage = output.Resolution_image?.output?.image_url || '';\n    \n    // Create pages from the text and images\n    const pages = [\n      {\n        text: introText,\n        image: introImage\n      },\n      {\n        text: adventureText,\n        image: adventureImage\n      },\n      {\n        text: resolutionText,\n        image: resolutionImage\n      }\n    ].filter(page => page.text || page.image); // Filter out empty pages\n    \n    return {\n      output: {\n        pages\n      }\n    };\n  } catch (error) {\n    console.error('Error parsing story response:', error);\n    return {\n      output: {\n        pages: []\n      }\n    };\n  }\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,kBAAkB,GAAIC,WAAW,IAAK;EACjD,IAAI;IAAA,IAAAC,mBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,qBAAA,EAAAC,sBAAA;IACF;IACA,MAAMC,MAAM,GAAGP,WAAW,CAACQ,MAAM,IAAI,CAAC,CAAC;;IAEvC;IACA,MAAMC,eAAe,GAAGF,MAAM,CAACG,gBAAgB,IAAI,CAAC,CAAC;;IAErD;IACA,MAAMC,SAAS,GAAGF,eAAe,CAACG,iBAAiB,IAAI,EAAE;IACzD,MAAMC,aAAa,GAAGJ,eAAe,CAACK,cAAc,IAAI,EAAE;IAC1D,MAAMC,cAAc,GAAGN,eAAe,CAACO,eAAe,IAAI,EAAE;;IAE5D;IACA,MAAMC,UAAU,GAAG,EAAAhB,mBAAA,GAAAM,MAAM,CAACW,WAAW,cAAAjB,mBAAA,wBAAAC,qBAAA,GAAlBD,mBAAA,CAAoBM,MAAM,cAAAL,qBAAA,uBAA1BA,qBAAA,CAA4BiB,SAAS,KAAI,EAAE;IAC9D,MAAMC,cAAc,GAAG,EAAAjB,qBAAA,GAAAI,MAAM,CAACc,eAAe,cAAAlB,qBAAA,wBAAAC,sBAAA,GAAtBD,qBAAA,CAAwBI,MAAM,cAAAH,sBAAA,uBAA9BA,sBAAA,CAAgCe,SAAS,KAAI,EAAE;IACtE,MAAMG,eAAe,GAAG,EAAAjB,qBAAA,GAAAE,MAAM,CAACgB,gBAAgB,cAAAlB,qBAAA,wBAAAC,sBAAA,GAAvBD,qBAAA,CAAyBE,MAAM,cAAAD,sBAAA,uBAA/BA,sBAAA,CAAiCa,SAAS,KAAI,EAAE;;IAExE;IACA,MAAMK,KAAK,GAAG,CACZ;MACEC,IAAI,EAAEd,SAAS;MACfe,KAAK,EAAET;IACT,CAAC,EACD;MACEQ,IAAI,EAAEZ,aAAa;MACnBa,KAAK,EAAEN;IACT,CAAC,EACD;MACEK,IAAI,EAAEV,cAAc;MACpBW,KAAK,EAAEJ;IACT,CAAC,CACF,CAACK,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACH,IAAI,IAAIG,IAAI,CAACF,KAAK,CAAC,CAAC,CAAC;;IAE3C,OAAO;MACLnB,MAAM,EAAE;QACNiB;MACF;IACF,CAAC;EACH,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO;MACLtB,MAAM,EAAE;QACNiB,KAAK,EAAE;MACT;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}