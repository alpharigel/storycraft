{"ast":null,"code":"var _jsxFileName = \"/Users/arminforoughi/Documents/storycraft/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport StoryForm from './components/StoryForm';\nimport Storybook from './components/Storybook';\nimport { parseStoryResponse } from './utils/storyParser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [story, setStory] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [streamingData, setStreamingData] = useState([]);\n  const [isStreaming, setIsStreaming] = useState(false);\n  const generateStory = async formData => {\n    setLoading(true);\n    setError(null);\n    setStreamingData([]);\n    setIsStreaming(true);\n    try {\n      const response = await fetch('/api/released-app/03ebb9ea-1fda-493c-86da-597e2801635e/run', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ww-5916h52zF1qi3SxMASUJ1HScxn1LibbpYmewHyfrJBs56tixAjGvR1'\n        },\n        body: JSON.stringify({\n          inputs: {\n            childname: formData.childName,\n            interests: formData.interests,\n            readinglevel: formData.readingLevel\n          },\n          version: \"^3.0\"\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to generate story');\n      }\n\n      // For streaming, just display the raw text first\n      const text = await response.text();\n\n      // Try to extract and display any images from the response\n      const imageUrlRegex = /\"image_url\":\"([^\"]+)\"/g;\n      let match;\n      const imageUrls = [];\n      while ((match = imageUrlRegex.exec(text)) !== null) {\n        imageUrls.push(match[1]);\n      }\n\n      // Extract text content\n      const textContentRegex = /\"(introduction|adventure|resolution)_text\":\"([^\"]+)\"/g;\n      const textContents = [];\n      while ((match = textContentRegex.exec(text)) !== null) {\n        textContents.push({\n          type: match[1],\n          text: match[2]\n        });\n      }\n\n      // Create a simple story object from the extracted data\n      if (imageUrls.length > 0 && textContents.length > 0) {\n        // Ensure we only have 3 pages maximum\n        const pages = [];\n\n        // Map the text content types to their respective pages\n        const contentMap = textContents.reduce((map, content) => {\n          map[content.type] = content.text;\n          return map;\n        }, {});\n\n        // Create pages in the correct order\n        if (contentMap.introduction) {\n          pages.push({\n            text: contentMap.introduction,\n            image: imageUrls.length > 0 ? imageUrls[0] : null\n          });\n        }\n        if (contentMap.adventure) {\n          pages.push({\n            text: contentMap.adventure,\n            image: imageUrls.length > 1 ? imageUrls[1] : null\n          });\n        }\n        if (contentMap.resolution) {\n          pages.push({\n            text: contentMap.resolution,\n            image: imageUrls.length > 2 ? imageUrls[2] : null\n          });\n        }\n        setStory({\n          output: {\n            pages\n          }\n        });\n      } else {\n        // Try to parse as JSON as a fallback\n        try {\n          const data = JSON.parse(text);\n          const parsedStory = parseStoryResponse(data);\n          setStory(parsedStory);\n        } catch (e) {\n          console.error('Failed to parse response:', e);\n          setError('Failed to parse the story response');\n        }\n      }\n\n      // Display the raw response for debugging\n      setStreamingData([{\n        type: 'raw',\n        value: text\n      }]);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n      setIsStreaming(false);\n    }\n  };\n\n  // Function to parse streaming response data\n  const parseStreamingResponse = data => {\n    if (data.type === 'outputs') {\n      const storyData = data.values;\n\n      // Extract text and images\n      const pages = [];\n      if (storyData.story_generation) {\n        // Add introduction page\n        if (storyData.story_generation.introduction_text) {\n          var _storyData$Intro_imag, _storyData$Intro_imag2;\n          pages.push({\n            text: storyData.story_generation.introduction_text,\n            image: ((_storyData$Intro_imag = storyData.Intro_image) === null || _storyData$Intro_imag === void 0 ? void 0 : (_storyData$Intro_imag2 = _storyData$Intro_imag.output) === null || _storyData$Intro_imag2 === void 0 ? void 0 : _storyData$Intro_imag2.image_url) || null\n          });\n        }\n\n        // Add adventure page\n        if (storyData.story_generation.adventure_text) {\n          var _storyData$adventure_, _storyData$adventure_2;\n          pages.push({\n            text: storyData.story_generation.adventure_text,\n            image: ((_storyData$adventure_ = storyData.adventure_image) === null || _storyData$adventure_ === void 0 ? void 0 : (_storyData$adventure_2 = _storyData$adventure_.output) === null || _storyData$adventure_2 === void 0 ? void 0 : _storyData$adventure_2.image_url) || null\n          });\n        }\n\n        // Add resolution page\n        if (storyData.story_generation.resolution_text) {\n          var _storyData$Resolution, _storyData$Resolution2;\n          pages.push({\n            text: storyData.story_generation.resolution_text,\n            image: ((_storyData$Resolution = storyData.Resolution_image) === null || _storyData$Resolution === void 0 ? void 0 : (_storyData$Resolution2 = _storyData$Resolution.output) === null || _storyData$Resolution2 === void 0 ? void 0 : _storyData$Resolution2.image_url) || null\n          });\n        }\n      }\n      return {\n        output: {\n          pages\n        }\n      };\n    }\n    return null;\n  };\n  const parseStoryResponse = data => {\n    // Check if we have the expected data structure\n    if (!data || !data.outputs) {\n      console.error('Unexpected response format:', data);\n      return null;\n    }\n    try {\n      // Extract the story generation data\n      const storyData = data.outputs.story_generation || {};\n\n      // Create exactly 3 pages for introduction, adventure, and resolution\n      const pages = [];\n\n      // Add introduction page\n      if (storyData.introduction_text) {\n        var _data$outputs$Intro_i, _data$outputs$Intro_i2;\n        pages.push({\n          text: storyData.introduction_text,\n          image: ((_data$outputs$Intro_i = data.outputs.Intro_image) === null || _data$outputs$Intro_i === void 0 ? void 0 : (_data$outputs$Intro_i2 = _data$outputs$Intro_i.output) === null || _data$outputs$Intro_i2 === void 0 ? void 0 : _data$outputs$Intro_i2.image_url) || null\n        });\n      }\n\n      // Add adventure page\n      if (storyData.adventure_text) {\n        var _data$outputs$adventu, _data$outputs$adventu2;\n        pages.push({\n          text: storyData.adventure_text,\n          image: ((_data$outputs$adventu = data.outputs.adventure_image) === null || _data$outputs$adventu === void 0 ? void 0 : (_data$outputs$adventu2 = _data$outputs$adventu.output) === null || _data$outputs$adventu2 === void 0 ? void 0 : _data$outputs$adventu2.image_url) || null\n        });\n      }\n\n      // Add resolution page\n      if (storyData.resolution_text) {\n        var _data$outputs$Resolut, _data$outputs$Resolut2;\n        pages.push({\n          text: storyData.resolution_text,\n          image: ((_data$outputs$Resolut = data.outputs.Resolution_image) === null || _data$outputs$Resolut === void 0 ? void 0 : (_data$outputs$Resolut2 = _data$outputs$Resolut.output) === null || _data$outputs$Resolut2 === void 0 ? void 0 : _data$outputs$Resolut2.image_url) || null\n        });\n      }\n      return {\n        output: {\n          pages\n        }\n      };\n    } catch (error) {\n      console.error('Error parsing story response:', error);\n      return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Personalized Storybook Generator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!story && !isStreaming && /*#__PURE__*/_jsxDEV(StoryForm, {\n        onSubmit: generateStory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 36\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Generating your storybook... Please wait!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 19\n      }, this), isStreaming && streamingData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"streaming-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Generating your story...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"streaming-content\",\n          children: streamingData.map((chunk, index) => {\n            // Display text chunks\n            if (chunk.type === 'chunk' && chunk.value.type === 'chunk') {\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                children: chunk.value.value\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 26\n              }, this);\n            }\n\n            // Display images as they come in\n            if (chunk.type === 'chunk' && chunk.value.type === 'tool' && chunk.value.output && chunk.value.output.type === 'image') {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"streaming-image\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: chunk.value.output.image_url,\n                  alt: \"Story illustration\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 23\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 21\n              }, this);\n            }\n            return null;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this), story && !loading && /*#__PURE__*/_jsxDEV(Storybook, {\n        story: story,\n        onNewStory: () => {\n          setStory(null);\n          setStreamingData([]);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Powered by Wordware AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Tj8W/aTIxT+fKcyQc6fOkFxA8AM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","StoryForm","Storybook","parseStoryResponse","jsxDEV","_jsxDEV","App","_s","story","setStory","loading","setLoading","error","setError","streamingData","setStreamingData","isStreaming","setIsStreaming","generateStory","formData","response","fetch","method","headers","body","JSON","stringify","inputs","childname","childName","interests","readinglevel","readingLevel","version","ok","Error","text","imageUrlRegex","match","imageUrls","exec","push","textContentRegex","textContents","type","length","pages","contentMap","reduce","map","content","introduction","image","adventure","resolution","output","data","parse","parsedStory","e","console","value","err","message","parseStreamingResponse","storyData","values","story_generation","introduction_text","_storyData$Intro_imag","_storyData$Intro_imag2","Intro_image","image_url","adventure_text","_storyData$adventure_","_storyData$adventure_2","adventure_image","resolution_text","_storyData$Resolution","_storyData$Resolution2","Resolution_image","outputs","_data$outputs$Intro_i","_data$outputs$Intro_i2","_data$outputs$adventu","_data$outputs$adventu2","_data$outputs$Resolut","_data$outputs$Resolut2","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","chunk","index","src","alt","onNewStory","_c","$RefreshReg$"],"sources":["/Users/arminforoughi/Documents/storycraft/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport StoryForm from './components/StoryForm';\nimport Storybook from './components/Storybook';\nimport { parseStoryResponse } from './utils/storyParser';\n\nfunction App() {\n  const [story, setStory] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [streamingData, setStreamingData] = useState([]);\n  const [isStreaming, setIsStreaming] = useState(false);\n\n  const generateStory = async (formData) => {\n    setLoading(true);\n    setError(null);\n    setStreamingData([]);\n    setIsStreaming(true);\n    \n    try {\n      const response = await fetch('/api/released-app/03ebb9ea-1fda-493c-86da-597e2801635e/run', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ww-5916h52zF1qi3SxMASUJ1HScxn1LibbpYmewHyfrJBs56tixAjGvR1'\n        },\n        body: JSON.stringify({\n          inputs: {\n            childname: formData.childName,\n            interests: formData.interests,\n            readinglevel: formData.readingLevel\n          },\n          version: \"^3.0\"\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to generate story');\n      }\n      \n      // For streaming, just display the raw text first\n      const text = await response.text();\n      \n      // Try to extract and display any images from the response\n      const imageUrlRegex = /\"image_url\":\"([^\"]+)\"/g;\n      let match;\n      const imageUrls = [];\n      \n      while ((match = imageUrlRegex.exec(text)) !== null) {\n        imageUrls.push(match[1]);\n      }\n      \n      // Extract text content\n      const textContentRegex = /\"(introduction|adventure|resolution)_text\":\"([^\"]+)\"/g;\n      const textContents = [];\n      \n      while ((match = textContentRegex.exec(text)) !== null) {\n        textContents.push({\n          type: match[1],\n          text: match[2]\n        });\n      }\n      \n      // Create a simple story object from the extracted data\n      if (imageUrls.length > 0 && textContents.length > 0) {\n        // Ensure we only have 3 pages maximum\n        const pages = [];\n        \n        // Map the text content types to their respective pages\n        const contentMap = textContents.reduce((map, content) => {\n          map[content.type] = content.text;\n          return map;\n        }, {});\n        \n        // Create pages in the correct order\n        if (contentMap.introduction) {\n          pages.push({\n            text: contentMap.introduction,\n            image: imageUrls.length > 0 ? imageUrls[0] : null\n          });\n        }\n        \n        if (contentMap.adventure) {\n          pages.push({\n            text: contentMap.adventure,\n            image: imageUrls.length > 1 ? imageUrls[1] : null\n          });\n        }\n        \n        if (contentMap.resolution) {\n          pages.push({\n            text: contentMap.resolution,\n            image: imageUrls.length > 2 ? imageUrls[2] : null\n          });\n        }\n        \n        setStory({\n          output: { pages }\n        });\n      } else {\n        // Try to parse as JSON as a fallback\n        try {\n          const data = JSON.parse(text);\n          const parsedStory = parseStoryResponse(data);\n          setStory(parsedStory);\n        } catch (e) {\n          console.error('Failed to parse response:', e);\n          setError('Failed to parse the story response');\n        }\n      }\n      \n      // Display the raw response for debugging\n      setStreamingData([{ type: 'raw', value: text }]);\n      \n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n      setIsStreaming(false);\n    }\n  };\n\n  // Function to parse streaming response data\n  const parseStreamingResponse = (data) => {\n    if (data.type === 'outputs') {\n      const storyData = data.values;\n      \n      // Extract text and images\n      const pages = [];\n      \n      if (storyData.story_generation) {\n        // Add introduction page\n        if (storyData.story_generation.introduction_text) {\n          pages.push({\n            text: storyData.story_generation.introduction_text,\n            image: storyData.Intro_image?.output?.image_url || null\n          });\n        }\n        \n        // Add adventure page\n        if (storyData.story_generation.adventure_text) {\n          pages.push({\n            text: storyData.story_generation.adventure_text,\n            image: storyData.adventure_image?.output?.image_url || null\n          });\n        }\n        \n        // Add resolution page\n        if (storyData.story_generation.resolution_text) {\n          pages.push({\n            text: storyData.story_generation.resolution_text,\n            image: storyData.Resolution_image?.output?.image_url || null\n          });\n        }\n      }\n      \n      return {\n        output: {\n          pages\n        }\n      };\n    }\n    \n    return null;\n  };\n\n  const parseStoryResponse = (data) => {\n    // Check if we have the expected data structure\n    if (!data || !data.outputs) {\n      console.error('Unexpected response format:', data);\n      return null;\n    }\n    \n    try {\n      // Extract the story generation data\n      const storyData = data.outputs.story_generation || {};\n      \n      // Create exactly 3 pages for introduction, adventure, and resolution\n      const pages = [];\n      \n      // Add introduction page\n      if (storyData.introduction_text) {\n        pages.push({\n          text: storyData.introduction_text,\n          image: data.outputs.Intro_image?.output?.image_url || null\n        });\n      }\n      \n      // Add adventure page\n      if (storyData.adventure_text) {\n        pages.push({\n          text: storyData.adventure_text,\n          image: data.outputs.adventure_image?.output?.image_url || null\n        });\n      }\n      \n      // Add resolution page\n      if (storyData.resolution_text) {\n        pages.push({\n          text: storyData.resolution_text,\n          image: data.outputs.Resolution_image?.output?.image_url || null\n        });\n      }\n      \n      return {\n        output: {\n          pages\n        }\n      };\n    } catch (error) {\n      console.error('Error parsing story response:', error);\n      return null;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Personalized Storybook Generator</h1>\n      </header>\n      <main>\n        {!story && !isStreaming && <StoryForm onSubmit={generateStory} />}\n        {loading && <div className=\"loading\">Generating your storybook... Please wait!</div>}\n        {error && <div className=\"error\">Error: {error}</div>}\n        \n        {isStreaming && streamingData.length > 0 && (\n          <div className=\"streaming-container\">\n            <h2>Generating your story...</h2>\n            <div className=\"streaming-content\">\n              {streamingData.map((chunk, index) => {\n                // Display text chunks\n                if (chunk.type === 'chunk' && chunk.value.type === 'chunk') {\n                  return <span key={index}>{chunk.value.value}</span>;\n                }\n                \n                // Display images as they come in\n                if (chunk.type === 'chunk' && chunk.value.type === 'tool' && \n                    chunk.value.output && chunk.value.output.type === 'image') {\n                  return (\n                    <div key={index} className=\"streaming-image\">\n                      <img src={chunk.value.output.image_url} alt=\"Story illustration\" />\n                    </div>\n                  );\n                }\n                \n                return null;\n              })}\n            </div>\n          </div>\n        )}\n        \n        {story && !loading && <Storybook story={story} onNewStory={() => {\n          setStory(null);\n          setStreamingData([]);\n        }} />}\n      </main>\n      <footer>\n        <p>Powered by Wordware AI</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}