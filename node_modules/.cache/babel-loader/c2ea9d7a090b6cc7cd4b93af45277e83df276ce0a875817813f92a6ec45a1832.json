{"ast":null,"code":"/**\n * Parses the API response into a format usable by the Storybook component\n * This function may need to be adjusted based on the actual API response structure\n */\nexport const parseStoryResponse = apiResponse => {\n  // If the API already returns a structured format with pages, use it directly\n  if (apiResponse.output && Array.isArray(apiResponse.output.pages)) {\n    return apiResponse;\n  }\n\n  // Otherwise, try to parse the response into pages\n  try {\n    const output = apiResponse.output || {};\n    const storyText = output.story || '';\n    const storyImages = output.images || [];\n\n    // Split the story into paragraphs\n    const paragraphs = storyText.split('\\n\\n').filter(p => p.trim());\n\n    // Create pages from paragraphs and images\n    const pages = paragraphs.map((text, index) => ({\n      text,\n      image: storyImages[index] || null\n    }));\n    return {\n      ...apiResponse,\n      output: {\n        ...output,\n        pages\n      }\n    };\n  } catch (error) {\n    console.error('Error parsing story response:', error);\n    return {\n      ...apiResponse,\n      output: {\n        pages: []\n      }\n    };\n  }\n};","map":{"version":3,"names":["parseStoryResponse","apiResponse","output","Array","isArray","pages","storyText","story","storyImages","images","paragraphs","split","filter","p","trim","map","text","index","image","error","console"],"sources":["/Users/arminforoughi/Documents/storycraft/src/utils/storyParser.js"],"sourcesContent":["/**\n * Parses the API response into a format usable by the Storybook component\n * This function may need to be adjusted based on the actual API response structure\n */\nexport const parseStoryResponse = (apiResponse) => {\n  // If the API already returns a structured format with pages, use it directly\n  if (apiResponse.output && Array.isArray(apiResponse.output.pages)) {\n    return apiResponse;\n  }\n  \n  // Otherwise, try to parse the response into pages\n  try {\n    const output = apiResponse.output || {};\n    const storyText = output.story || '';\n    const storyImages = output.images || [];\n    \n    // Split the story into paragraphs\n    const paragraphs = storyText.split('\\n\\n').filter(p => p.trim());\n    \n    // Create pages from paragraphs and images\n    const pages = paragraphs.map((text, index) => ({\n      text,\n      image: storyImages[index] || null\n    }));\n    \n    return {\n      ...apiResponse,\n      output: {\n        ...output,\n        pages\n      }\n    };\n  } catch (error) {\n    console.error('Error parsing story response:', error);\n    return {\n      ...apiResponse,\n      output: {\n        pages: []\n      }\n    };\n  }\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,kBAAkB,GAAIC,WAAW,IAAK;EACjD;EACA,IAAIA,WAAW,CAACC,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACH,WAAW,CAACC,MAAM,CAACG,KAAK,CAAC,EAAE;IACjE,OAAOJ,WAAW;EACpB;;EAEA;EACA,IAAI;IACF,MAAMC,MAAM,GAAGD,WAAW,CAACC,MAAM,IAAI,CAAC,CAAC;IACvC,MAAMI,SAAS,GAAGJ,MAAM,CAACK,KAAK,IAAI,EAAE;IACpC,MAAMC,WAAW,GAAGN,MAAM,CAACO,MAAM,IAAI,EAAE;;IAEvC;IACA,MAAMC,UAAU,GAAGJ,SAAS,CAACK,KAAK,CAAC,MAAM,CAAC,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;;IAEhE;IACA,MAAMT,KAAK,GAAGK,UAAU,CAACK,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,MAAM;MAC7CD,IAAI;MACJE,KAAK,EAAEV,WAAW,CAACS,KAAK,CAAC,IAAI;IAC/B,CAAC,CAAC,CAAC;IAEH,OAAO;MACL,GAAGhB,WAAW;MACdC,MAAM,EAAE;QACN,GAAGA,MAAM;QACTG;MACF;IACF,CAAC;EACH,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO;MACL,GAAGlB,WAAW;MACdC,MAAM,EAAE;QACNG,KAAK,EAAE;MACT;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}